/*
 * FACTORIAL NUMBERS FINDER
 * Made by: Luiz Gustavo Sincaruk Vieira (10374622)
 * AKA: Sincaruk2018, sincaruk, coldfox
 * 
 * 
 *  December/2020
 */

#include <stdio.h>
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <bitset>
#include <map>
#include <iterator>
using namespace std;
#define NUMPRIMES 122

/* It does find the 'NUMPRIMES - 1' first prime numbers, using the "Sieve of
 * Eratosthenes" principle. The multiples of each checked number is discarded
 * as prime, the standing numbers at the end of the operation will be put in
 * the primes vector*/
void PreProcessing(vector<int> *primes)
{
	int i,j;
	bitset<NUMPRIMES> bs; // 0 to unavailable, 1 to avaliable
	bs.set();
	bs[0] = bs[1] = 0;
	for(i = 2; i < NUMPRIMES; i++)
	{
		if(bs[i] == 1)
		{
			for(j = i + i; j < NUMPRIMES; j +=  i) // Search for multiples
			{
				bs[j] = 0; // Unavaliable
			}
		}
	}
	for(i = 2; i < NUMPRIMES; i++)
	{
		if(bs[i] == 1)
		{
			primes->push_back(i);
		}
	}
}

/* 
 * It does the factoration in each iteraction. For each division without
 * a rest, the number of the respectivve key is increased. Numb is the iteraction
 * number, primes is the prime number vector generated by PreProcessing,
 * m is the pointer to a Map
 * */
void Factor(int numb, vector<int> primes, map<int, int> *m)
{
	int i = 0;
	int aux_numb = numb;
	if (numb == 1)
	{
		return;
	}
	
	while(aux_numb > 1)
	{
		if (aux_numb % primes[i] == 0)
		{
			aux_numb = aux_numb/primes[i];
			m->at(i) = m->at(i) + 1; // Sum the numbers of that number found
		}
		else
		{
			i++;
		}
	}
	
	Factor(numb-1,primes, m);
}

/* It clears the map at m and puts the number 0 to each key*/
void Custom_Clear(map<int, int> *m)
{
	int i;
	m->clear();
	for(i = 0; i < NUMPRIMES; i++)
	{
		m->insert(std::pair<int,int>(i,0));
	}
}

/* Seriously? */

void FormatingB(int a)
{
	if (a < 10)
	{
		printf("  ");
	}
	else if(a < 100)
	{
		printf(" ");
	}
}


int main(int argc, char **argv)
{
	int numb, i;
	int a;
	vector<int> primes;
	PreProcessing(&primes);
	map<int, int> m;
	while(1)
	{
		/* while(scanf("%d",&numb) != 0) core dumped*/
		scanf("%d",&numb);
		if (numb == 0)
		{
			break;
		}
		
		Custom_Clear(&m);
		Factor(numb, primes, &m);
		FormatingB(numb);
		printf("%d! =",numb);
		a = 0;
		for(i = 0; i < NUMPRIMES; i++)
		{
			if(m[i] != 0)
			{
				if(a%15 == 0 && a!= 0)
				{
					printf("\n      ");
				}
				a++;
				FormatingB(m[i]);
				printf("%d",m[i]);
				
			}
		}
		printf("\n");
	}
	return 0;
}

